{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "4.0.0.0",
  "metadata": {
    "description": "Deploy SharePoint Subscription / 2019 / 2016 / 2013 with a lightweight configuration. Each version is independent and may or may not be deployed.",
    "author": "Yvand"
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "provisionSharePointSubscription": {
      "type": "string",
      "defaultValue": "Subscription-Latest",
      "allowedValues": [
        "No",
        "Subscription-RTM",
        "Subscription-22H2",
        "Subscription-23H1",
        "Subscription-23H2",
        "Subscription-Latest"
      ],
      "metadata": {
        "description": "Specify if a SharePoint Subscription farm should be provisioned, and which version if so."
      }
    },
    "provisionSharePoint2019": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Specify if a SharePoint 2019 farm should be provisioned."
      }
    },
    "provisionSharePoint2016": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Specify if a SharePoint 2016 farm should be provisioned."
      }
    },
    "provisionSharePoint2013": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Specify if a SharePoint 2013 farm should be provisioned."
      }
    },
    "domainFQDN": {
      "type": "string",
      "defaultValue": "contoso.local",
      "minLength": 5,
      "metadata": {
        "description": "FQDN of the AD forest to create."
      }
    },
    "configureADFS": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Specify if ADFS shoulde be provisioned, and used in SharePoint in an extended zone."
      }
    },
    "addAzureBastion": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Specify if Azure Bastion should be provisioned. See https://azure.microsoft.com/en-us/services/azure-bastion for more information."
      }
    },
    "addPublicIPAddress": {
      "type": "string",
      "defaultValue": "SharePointVMsOnly",
      "allowedValues": [
        "Yes",
        "No",
        "SharePointVMsOnly"
      ],
      "metadata": {
        "description": "Specify if each VM should have a public IP and be reachable from Internet."
      }
    },
    "RDPTrafficAllowed": {
      "type": "string",
      "defaultValue": "No",
      "minLength": 1,
      "metadata": {
        "description": "Specify if RDP traffic is allowed:<br>- If 'No' (default): Firewall denies all incoming RDP traffic.<br>- If '*' or 'Internet': Firewall accepts all incoming RDP traffic from Internet.<br>- If CIDR notation (e.g. 192.168.99.0/24 or 2001:1234::/64) or IP address (e.g. 192.168.99.0 or 2001:1234::): Firewall accepts incoming RDP traffic from the IP addresses specified."
      }
    },
    "adminUserName": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Name of the AD and SharePoint administrator. 'admin' and 'administrator' are not allowed."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "minLength": 8,
      "metadata": {
        "description": "Input must meet password complexity requirements as documented in https://learn.microsoft.com/azure/virtual-machines/windows/faq#what-are-the-password-requirements-when-creating-a-vm-"
      }
    },
    "serviceAccountsPassword": {
      "type": "securestring",
      "minLength": 8,
      "metadata": {
        "description": "Password for all service accounts and SharePoint passphrase. Input must meet password complexity requirements as documented in https://learn.microsoft.com/azure/virtual-machines/windows/faq#what-are-the-password-requirements-when-creating-a-vm-"
      }
    },
    "vmsTimeZone": {
      "type": "string",
      "defaultValue": "Romance Standard Time",
      "allowedValues": [
        "Dateline Standard Time",
        "UTC-11",
        "Aleutian Standard Time",
        "Hawaiian Standard Time",
        "Marquesas Standard Time",
        "Alaskan Standard Time",
        "UTC-09",
        "Pacific Standard Time (Mexico)",
        "UTC-08",
        "Pacific Standard Time",
        "US Mountain Standard Time",
        "Mountain Standard Time (Mexico)",
        "Mountain Standard Time",
        "Central America Standard Time",
        "Central Standard Time",
        "Easter Island Standard Time",
        "Central Standard Time (Mexico)",
        "Canada Central Standard Time",
        "SA Pacific Standard Time",
        "Eastern Standard Time (Mexico)",
        "Eastern Standard Time",
        "Haiti Standard Time",
        "Cuba Standard Time",
        "US Eastern Standard Time",
        "Turks And Caicos Standard Time",
        "Paraguay Standard Time",
        "Atlantic Standard Time",
        "Venezuela Standard Time",
        "Central Brazilian Standard Time",
        "SA Western Standard Time",
        "Pacific SA Standard Time",
        "Newfoundland Standard Time",
        "Tocantins Standard Time",
        "E. South America Standard Time",
        "SA Eastern Standard Time",
        "Argentina Standard Time",
        "Greenland Standard Time",
        "Montevideo Standard Time",
        "Magallanes Standard Time",
        "Saint Pierre Standard Time",
        "Bahia Standard Time",
        "UTC-02",
        "Mid-Atlantic Standard Time",
        "Azores Standard Time",
        "Cape Verde Standard Time",
        "UTC",
        "GMT Standard Time",
        "Greenwich Standard Time",
        "Sao Tome Standard Time",
        "Morocco Standard Time",
        "W. Europe Standard Time",
        "Central Europe Standard Time",
        "Romance Standard Time",
        "Central European Standard Time",
        "W. Central Africa Standard Time",
        "Jordan Standard Time",
        "GTB Standard Time",
        "Middle East Standard Time",
        "Egypt Standard Time",
        "E. Europe Standard Time",
        "Syria Standard Time",
        "West Bank Standard Time",
        "South Africa Standard Time",
        "FLE Standard Time",
        "Israel Standard Time",
        "Kaliningrad Standard Time",
        "Sudan Standard Time",
        "Libya Standard Time",
        "Namibia Standard Time",
        "Arabic Standard Time",
        "Turkey Standard Time",
        "Arab Standard Time",
        "Belarus Standard Time",
        "Russian Standard Time",
        "E. Africa Standard Time",
        "Iran Standard Time",
        "Arabian Standard Time",
        "Astrakhan Standard Time",
        "Azerbaijan Standard Time",
        "Russia Time Zone 3",
        "Mauritius Standard Time",
        "Saratov Standard Time",
        "Georgian Standard Time",
        "Volgograd Standard Time",
        "Caucasus Standard Time",
        "Afghanistan Standard Time",
        "West Asia Standard Time",
        "Ekaterinburg Standard Time",
        "Pakistan Standard Time",
        "Qyzylorda Standard Time",
        "India Standard Time",
        "Sri Lanka Standard Time",
        "Nepal Standard Time",
        "Central Asia Standard Time",
        "Bangladesh Standard Time",
        "Omsk Standard Time",
        "Myanmar Standard Time",
        "SE Asia Standard Time",
        "Altai Standard Time",
        "W. Mongolia Standard Time",
        "North Asia Standard Time",
        "N. Central Asia Standard Time",
        "Tomsk Standard Time",
        "China Standard Time",
        "North Asia East Standard Time",
        "Singapore Standard Time",
        "W. Australia Standard Time",
        "Taipei Standard Time",
        "Ulaanbaatar Standard Time",
        "Aus Central W. Standard Time",
        "Transbaikal Standard Time",
        "Tokyo Standard Time",
        "North Korea Standard Time",
        "Korea Standard Time",
        "Yakutsk Standard Time",
        "Cen. Australia Standard Time",
        "AUS Central Standard Time",
        "E. Australia Standard Time",
        "AUS Eastern Standard Time",
        "West Pacific Standard Time",
        "Tasmania Standard Time",
        "Vladivostok Standard Time",
        "Lord Howe Standard Time",
        "Bougainville Standard Time",
        "Russia Time Zone 10",
        "Magadan Standard Time",
        "Norfolk Standard Time",
        "Sakhalin Standard Time",
        "Central Pacific Standard Time",
        "Russia Time Zone 11",
        "New Zealand Standard Time",
        "UTC+12",
        "Fiji Standard Time",
        "Kamchatka Standard Time",
        "Chatham Islands Standard Time",
        "UTC+13",
        "Tonga Standard Time",
        "Samoa Standard Time",
        "Line Islands Standard Time"
      ],
      "minLength": 2,
      "metadata": {
        "description": "Time zone of the virtual machines. Type \"[TimeZoneInfo]::GetSystemTimeZones().Id\" in PowerShell to get the list."
      }
    },
    "enableAutomaticUpdates": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable automatic Windows Updates."
      }
    },
    "enableHybridBenefitServerLicenses": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable Azure Hybrid Benefit to use your on-premises Windows Server licenses and reduce cost. See https://docs.microsoft.com/en-us/azure/virtual-machines/windows/hybrid-use-benefit-licensing for more information."
      }
    },
    "vmDCSize": {
      "type": "string",
      "defaultValue": "Standard_B2s",
      "metadata": {
        "description": "Size of the DC VM"
      }
    },
    "vmDCStorageAccountType": {
      "type": "string",
      "defaultValue": "StandardSSD_LRS",
      "allowedValues": [
        "Standard_LRS",
        "StandardSSD_LRS",
        "Premium_LRS",
        "Premium_ZRS",
        "StandardSSD_ZRS",
        "UltraSSD_LRS"
      ],
      "metadata": {
        "description": "Type of storage for the managed disks. Visit 'https://docs.microsoft.com/en-us/rest/api/compute/disks/list#diskstorageaccounttypes' for more information"
      }
    },
    "vmSQLSize": {
      "type": "string",
      "defaultValue": "Standard_B2ms",
      "metadata": {
        "description": "Size of the SQL VM"
      }
    },
    "vmSQLStorageAccountType": {
      "type": "string",
      "defaultValue": "StandardSSD_LRS",
      "allowedValues": [
        "Standard_LRS",
        "StandardSSD_LRS",
        "Premium_LRS",
        "Premium_ZRS",
        "StandardSSD_ZRS",
        "UltraSSD_LRS"
      ],
      "metadata": {
        "description": "Type of storage for the managed disks. Visit 'https://docs.microsoft.com/en-us/rest/api/compute/disks/list#diskstorageaccounttypes' for more information"
      }
    },
    "vmSPSize": {
      "type": "string",
      "defaultValue": "Standard_B4ms",
      "metadata": {
        "description": "Size of the SharePoint VM"
      }
    },
    "vmSPStorageAccountType": {
      "type": "string",
      "defaultValue": "StandardSSD_LRS",
      "allowedValues": [
        "Standard_LRS",
        "StandardSSD_LRS",
        "Premium_LRS",
        "Premium_ZRS",
        "StandardSSD_ZRS",
        "UltraSSD_LRS"
      ],
      "metadata": {
        "description": "Type of storage for the managed disks. Visit 'https://docs.microsoft.com/en-us/rest/api/compute/disks/list#diskstorageaccounttypes' for more information"
      }
    },
    "_artifactsLocation": {
      "type": "string",
      "defaultValue": "https://github.com/Yvand/AzureRM-Templates/raw/master/Templates/DTL-SharePoint-AllVersions-light",
      "metadata": {
        "description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
      }
    },
    "_artifactsLocationSasToken": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "The sasToken required to access _artifactsLocation. When the template is deployed using the accompanying scripts, a sasToken will be automatically generated."
      }
    }
  },
  "variables": {
    "resourceGroupNameFormatted": "[replace(replace(replace(replace(resourceGroup().name, '.', '-'), '(', '-'), ')', '-'), '_', '-')]",
    "_artifactsLocationWithTrailingSlash": "[concat(parameters('_artifactsLocation'), '/')]",
    "sharePointSettings": {
      "sharePointImagesList" : {
        "Subscription": "MicrosoftWindowsServer:WindowsServer:2022-datacenter-azure-edition-smalldisk:latest",
        "sp2019": "MicrosoftSharePoint:MicrosoftSharePointServer:sp2019gen2smalldisk:latest",
        "sp2016": "MicrosoftSharePoint:MicrosoftSharePointServer:sp2016:latest",
        "sp2013": "MicrosoftSharePoint:MicrosoftSharePointServer:sp2013:latest"
      },
      "sharePointSubscriptionBits" : [
        {
          "Label": "RTM",
          "Packages": [
            {
              "DownloadUrl": "https://download.microsoft.com/download/3/f/5/3f5f8a7e-462b-41ff-a5b2-04bdf5821ceb/OfficeServer.iso",
              "ChecksumType": "SHA256",
              "Checksum": "C576B847C573234B68FC602A0318F5794D7A61D8149EB6AE537AF04470B7FC05"
            }
          ]
        },
        {
          "Label": "22H2",
          "Packages": [
            {
              "DownloadUrl": "https://download.microsoft.com/download/8/d/f/8dfcb515-6e49-42e5-b20f-5ebdfd19d8e7/wssloc-subscription-kb5002270-fullfile-x64-glb.exe",
              "ChecksumType": "SHA256",
              "Checksum": "7E496530EB873146650A9E0653DE835CB2CAD9AF8D154CBD7387BB0F2297C9FC"
            },
            {
              "DownloadUrl": "https://download.microsoft.com/download/3/f/5/3f5b1ee0-3336-45d7-b2f4-1e6af977d574/sts-subscription-kb5002271-fullfile-x64-glb.exe",
              "ChecksumType": "SHA256",
              "Checksum": "247011443AC573D4F03B1622065A7350B8B3DAE04D6A5A6DC64C8270A3BE7636"
            }
          ]
        },
        {
          "Label" : "23H1",
          "Packages" : [
            {
              "DownloadUrl" : "https://download.microsoft.com/download/c/6/a/c6a17105-3d86-42ad-888d-49b22383bfa1/uber-subscription-kb5002355-fullfile-x64-glb.exe"
            }
          ]
        },
        {
          "Label" : "23H2",
          "Packages" : [
            {
              "DownloadUrl" : "https://download.microsoft.com/download/f/5/5/f5559e3f-8b24-419f-b238-b09cf986e927/uber-subscription-kb5002474-fullfile-x64-glb.exe"
            }
          ]
        },
        {
          "Label" : "Latest",
          "Packages" : [
            {
              "DownloadUrl" : "https://download.microsoft.com/download/c/4/9/c492d312-f267-4ead-bfea-5aaad0f817b6/uber-subscription-kb5002506-fullfile-x64-glb.exe"
            }
          ]
        }
      ]
    },
    "networkSettings": {
      "vNetPrivatePrefix": "10.1.0.0/16",
      "subnetDCPrefix": "10.1.1.0/24",
      "dcPrivateIPAddress": "10.1.1.4",
      "subnetSQLPrefix": "10.1.2.0/24",
      "subnetSPPrefix": "10.1.3.0/24",
      "vNetPrivateName": "[concat(variables('resourceGroupNameFormatted'), '-vnet')]",
      "subnetDCName": "Subnet-DC",
      "subnetSQLName": "Subnet-SQL",
      "subnetSPName": "Subnet-SP",
      "nsgSubnetDCName": "NSG-Subnet-DC",
      "nsgSubnetSQLName": "NSG-Subnet-SQL",
      "nsgSubnetSPName": "NSG-Subnet-SP",
      "vmDCPublicIPNicAssociation": {
        "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('vmsResourcesNames').vmDCPublicIPName)]"
      },
      "vmSQLPublicIPNicAssociation": {
        "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('vmsResourcesNames').vmSQLPublicIPName)]"
      },
      "vmSP2013PublicIPNicAssociation": {
        "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('vmsResourcesNames').vmSP2013PublicIPName)]"
      },
      "vmSP2016PublicIPNicAssociation": {
        "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('vmsResourcesNames').vmSP2016PublicIPName)]"
      },
      "vmSP2019PublicIPNicAssociation": {
        "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('vmsResourcesNames').vmSP2019PublicIPName)]"
      },
      "vmSPSubscriptionPublicIPNicAssociation": {
        "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('vmsResourcesNames').vmSPSubscriptionPublicIPName)]"
      },
      "nsgRuleAllowIncomingRdp": [
        {
          "name": "allow-rdp-rule",
          "properties": {
            "description": "Allow RDP",
            "protocol": "Tcp",
            "sourcePortRange": "*",
            "destinationPortRange": "3389",
            "sourceAddressPrefix": "[parameters('RDPTrafficAllowed')]",
            "destinationAddressPrefix": "*",
            "access": "Allow",
            "priority": 110,
            "direction": "Inbound"
          }
        }
      ]
    },
    "vmsSettings": {
      "vmDCName": "DC",
      "vmSQLName": "SQL",
      "vmSPSubscriptionName": "SPSE",
      "vmSP2019Name": "SP2019",
      "vmSP2016Name": "SP2016",
      "vmSP2013Name": "SP2013",
      "vmDCImage": "MicrosoftWindowsServer:WindowsServer:2022-datacenter-azure-edition-smalldisk:latest",
      "vmSQLImage": "MicrosoftSQLServer:sql2022-ws2022:sqldev-gen2:latest",
      "vmSPSubscriptionImage": "[variables('sharePointSettings').sharePointImagesList.Subscription]",
      "vmSP2019Image": "[variables('sharePointSettings').sharePointImagesList.sp2019]",
      "vmSP2016Image": "[variables('sharePointSettings').sharePointImagesList.sp2016]",
      "vmSP2013Image": "[variables('sharePointSettings').sharePointImagesList.sp2013]"
    },
    "vmsResourcesNames": {
      "vmDCNicName": "[concat('NIC-', variables('vmsSettings').vmDCName, '-0')]",
      "vmDCPublicIPName": "[concat('PublicIP-', variables('vmsSettings').vmDCName)]",
      "vmSQLNicName": "[concat('NIC-', variables('vmsSettings').vmSQLName, '-0')]",
      "vmSQLPublicIPName": "[concat('PublicIP-', variables('vmsSettings').vmSQLName)]",
      "vmSPSubscriptionNicName": "[concat('NIC-', variables('vmsSettings').vmSPSubscriptionName, '-0')]",
      "vmSPSubscriptionPublicIPName": "[concat('PublicIP-', variables('vmsSettings').vmSPSubscriptionName)]",
      "vmSP2019NicName": "[concat('NIC-', variables('vmsSettings').vmSP2019Name, '-0')]",
      "vmSP2019PublicIPName": "[concat('PublicIP-', variables('vmsSettings').vmSP2019Name)]",
      "vmSP2016NicName": "[concat('NIC-', variables('vmsSettings').vmSP2016Name, '-0')]",
      "vmSP2016PublicIPName": "[concat('PublicIP-', variables('vmsSettings').vmSP2016Name)]",
      "vmSP2013NicName": "[concat('NIC-', variables('vmsSettings').vmSP2013Name, '-0')]",
      "vmSP2013PublicIPName": "[concat('PublicIP-', variables('vmsSettings').vmSP2013Name)]"
    },
    "dscSettings": {
      "forceUpdateTag": "1.0",
      "vmDCScriptFileUri": "[uri(variables('_artifactsLocationWithTrailingSlash'), concat('dsc/ConfigureDCVM.zip', parameters('_artifactsLocationSasToken')))]",
      "vmDCScript": "ConfigureDCVM.ps1",
      "vmDCFunction": "ConfigureDCVM",
      "vmSQLScriptFileUri": "[uri(variables('_artifactsLocationWithTrailingSlash'), concat('dsc/ConfigureSQLVM.zip', parameters('_artifactsLocationSasToken')))]",
      "vmSQLScript": "ConfigureSQLVM.ps1",
      "vmSQLFunction": "ConfigureSQLVM",
      "vmSPSubscriptionScriptFileUri": "[uri(variables('_artifactsLocationWithTrailingSlash'), concat('dsc/ConfigureSPSE.zip', parameters('_artifactsLocationSasToken')))]",
      "vmSPLegacyScriptFileUri": "[uri(variables('_artifactsLocationWithTrailingSlash'), concat('dsc/ConfigureSPLegacy.zip', parameters('_artifactsLocationSasToken')))]",
      "vmSPSubscriptionScript": "ConfigureSPSE.ps1",
      "vmSPLegacyScript": "ConfigureSPLegacy.ps1",
      "vmSPFunction": "ConfigureSPVM"
    },
    "deploymentSettings": {
      "sharePointSitesAuthority": "spsites",
      "sharePointCentralAdminPort": 5000,
      "localAdminUserName": "[concat('l-', uniqueString(subscription().subscriptionId))]",
      "enableAnalysis": false,
      "applyBrowserPolicies": true,
      "sqlAlias": "SQLAlias",
      "spSuperUserName": "spSuperUser",
      "spSuperReaderName": "spSuperReader",
      "adfsSvcUserName": "adfssvc",
      "sqlSvcUserName": "sqlsvc",
      "spSetupUserName": "spsetup",
      "spFarmUserName": "spfarm",
      "spSvcUserName": "spsvc",
      "spAppPoolUserName": "spapppool",
      "spADDirSyncUserName": "spdirsync"
    }
  },
  "resources": [
    {
      "name": "[variables('networkSettings').nsgSubnetDCName]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2022-07-01",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": "[if(equals(toLower(parameters('RDPTrafficAllowed')), 'no'), json('null'), variables('networkSettings').nsgRuleAllowIncomingRdp)]"
      }
    },
    {
      "name": "[variables('networkSettings').nsgSubnetSQLName]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2022-07-01",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": "[if(equals(toLower(parameters('RDPTrafficAllowed')), 'no'), json('null'), variables('networkSettings').nsgRuleAllowIncomingRdp)]"
      }
    },
    {
      "name": "[variables('networkSettings').nsgSubnetSPName]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2022-07-01",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": "[if(equals(toLower(parameters('RDPTrafficAllowed')), 'no'), json('null'), variables('networkSettings').nsgRuleAllowIncomingRdp)]"
      }
    },
    {
      "name": "[variables('networkSettings').vNetPrivateName]",
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2022-07-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSettings').nsgSubnetDCName)]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSettings').nsgSubnetSQLName)]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSettings').nsgSubnetSPName)]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('networkSettings').vNetPrivatePrefix]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('networkSettings').subnetDCName]",
            "properties": {
              "addressPrefix": "[variables('networkSettings').subnetDCPrefix]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSettings').nsgSubnetDCName)]"
              }
            }
          },
          {
            "name": "[variables('networkSettings').subnetSQLName]",
            "properties": {
              "addressPrefix": "[variables('networkSettings').subnetSQLPrefix]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSettings').nsgSubnetSQLName)]"
              }
            }
          },
          {
            "name": "[variables('networkSettings').subnetSPName]",
            "properties": {
              "addressPrefix": "[variables('networkSettings').subnetSPPrefix]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSettings').nsgSubnetSPName)]"
              }
            }
          }
        ]
      }
    },
    {
      "condition": "[equals(parameters('addPublicIPAddress'), 'Yes')]",
      "name": "[variables('vmsResourcesNames').vmDCPublicIPName]",
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2022-07-01",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Basic",
        "tier": "Regional"
      },
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[toLower(concat(variables('resourceGroupNameFormatted'), '-', variables('vmsSettings').vmDCName))]"
        }
      }
    },
    {
      "name": "[variables('vmsResourcesNames').vmDCNicName]",
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2022-07-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('networkSettings').vNetPrivateName)]",
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('vmsResourcesNames').vmDCPublicIPName)]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[variables('networkSettings').dcPrivateIPAddress]",
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('networkSettings').vNetPrivateName, variables('networkSettings').subnetDCName)]"
              },
              "publicIPAddress": "[if(equals(parameters('addPublicIPAddress'), 'Yes'), variables('networkSettings').vmDCPublicIPNicAssociation, json('null'))]"
            }
          }
        ]
      }
    },
    {
      "name": "[variables('vmsSettings').vmDCName]",
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2022-08-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', variables('vmsResourcesNames').vmDCNicName)]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmDCSize')]"
        },
        "osProfile": {
          "computerName": "[variables('vmsSettings').vmDCName]",
          "adminUsername": "[parameters('adminUserName')]",
          "adminPassword": "[parameters('adminPassword')]",
          "windowsConfiguration": {
            "timeZone": "[parameters('vmsTimeZone')]",
            "enableAutomaticUpdates": "[parameters('enableAutomaticUpdates')]",
            "provisionVMAgent": true,
            "patchSettings": {
              "patchMode": "[if(parameters('enableAutomaticUpdates'), 'AutomaticByOS', 'Manual')]",
              "assessmentMode": "ImageDefault"
            }
          }
        },
        "storageProfile": {
          "imageReference": {
            "publisher":  "[split(variables('vmsSettings').vmDCImage, ':')[0]]",
            "offer": "[split(variables('vmsSettings').vmDCImage, ':')[1]]",
            "sku":  "[split(variables('vmsSettings').vmDCImage, ':')[2]]",
            "version":  "[split(variables('vmsSettings').vmDCImage, ':')[3]]"
          },
          "osDisk": {
            "name": "[concat('Disk-', variables('vmsSettings').vmDCName, '-OS')]",
            "caching": "ReadWrite",
            "osType": "Windows",
            "createOption": "FromImage",
            "diskSizeGB": 32,
            "managedDisk": {
              "storageAccountType": "[parameters('vmDCStorageAccountType')]"
            }
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('vmsResourcesNames').vmDCNicName)]"
            }
          ]
        },
        "licenseType": "[if(parameters('enableHybridBenefitServerLicenses'), 'Windows_Server', json('null'))]"
      },
      "resources": [
        {
          "name": "ConfigureDCVM",
          "type": "extensions",
          "location": "[parameters('location')]",
          "apiVersion": "2022-08-01",
          "dependsOn": [
            "[resourceId('Microsoft.Compute/virtualMachines', variables('vmsSettings').vmDCName)]"
          ],
          "properties": {
            "publisher": "Microsoft.Powershell",
            "type": "DSC",
            "typeHandlerVersion": "2.9",
            "autoUpgradeMinorVersion": true,
            "forceUpdateTag": "[variables('dscSettings').forceUpdateTag]",
            "settings": {
              "wmfVersion": "latest",
              "configuration": {
                "url": "[variables('dscSettings').vmDCScriptFileUri]",
                "script": "[variables('dscSettings').vmDCScript]",
                "function": "[variables('dscSettings').vmDCFunction]"
              },
              "configurationArguments": {
                "domainFQDN": "[parameters('domainFQDN')]",
                "PrivateIP": "[variables('networkSettings').dcPrivateIPAddress]",
                "SPServerName": "[if(not(equals(parameters('provisionSharePointSubscription'), 'No')), variables('vmsSettings').vmSPSubscriptionName, if(parameters('provisionSharePoint2019'), variables('vmsSettings').vmSP2019Image, if(parameters('provisionSharePoint2016'), variables('vmsSettings').vmSP2016Image, variables('vmsSettings').vmSP2013Image)))]",
                "SharePointSitesAuthority": "[concat(variables('deploymentSettings').sharePointSitesAuthority, 'SE')]",
                "SharePointCentralAdminPort": "[variables('deploymentSettings').sharePointCentralAdminPort]",
                "ApplyBrowserPolicies": "[variables('deploymentSettings').applyBrowserPolicies]",
                "ConfigureADFS": "[parameters('configureADFS')]"
              },
              "privacy": {
                "dataCollection": "enable"
              }
            },
            "protectedSettings": {
              "configurationArguments": {
                "AdminCreds": {
                  "UserName": "[parameters('adminUserName')]",
                  "Password": "[parameters('adminPassword')]"
                },
                "AdfsSvcCreds": {
                  "UserName": "[variables('deploymentSettings').adfsSvcUserName]",
                  "Password": "[parameters('serviceAccountsPassword')]"
                }
              }
            }
          }
        }
      ]
    },
    {
      "condition": "[equals(parameters('addPublicIPAddress'), 'Yes')]",
      "name": "[variables('vmsResourcesNames').vmSQLPublicIPName]",
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2022-07-01",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Basic",
        "tier": "Regional"
      },
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[toLower(concat(variables('resourceGroupNameFormatted'), '-', variables('vmsSettings').vmSQLName))]"
        }
      }
    },
    {
      "name": "[variables('vmsResourcesNames').vmSQLNicName]",
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2022-07-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('networkSettings').vNetPrivateName)]",
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('vmsResourcesNames').vmSQLPublicIPName)]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('networkSettings').vNetPrivateName, variables('networkSettings').subnetSQLName)]"
              },
              "publicIPAddress": "[if(equals(parameters('addPublicIPAddress'), 'Yes'), variables('networkSettings').vmSQLPublicIPNicAssociation, json('null'))]"
            }
          }
        ]
      }
    },
    {
      "name": "[variables('vmsSettings').vmSQLName]",
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2022-08-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', variables('vmsResourcesNames').vmSQLNicName)]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSQLSize')]"
        },
        "osProfile": {
          "computerName": "[variables('vmsSettings').vmSQLName]",
          "adminUsername": "[variables('deploymentSettings').localAdminUserName]",
          "adminPassword": "[parameters('adminPassword')]",
          "windowsConfiguration": {
            "timeZone": "[parameters('vmsTimeZone')]",
            "enableAutomaticUpdates": "[parameters('enableAutomaticUpdates')]",
            "provisionVMAgent": true,
            "patchSettings": {
              "patchMode": "[if(parameters('enableAutomaticUpdates'), 'AutomaticByOS', 'Manual')]",
              "assessmentMode": "ImageDefault"
            }
          }
        },
        "storageProfile": {
          "imageReference": {
            "publisher":  "[split(variables('vmsSettings').vmSQLImage, ':')[0]]",
            "offer": "[split(variables('vmsSettings').vmSQLImage, ':')[1]]",
            "sku":  "[split(variables('vmsSettings').vmSQLImage, ':')[2]]",
            "version":  "[split(variables('vmsSettings').vmSQLImage, ':')[3]]"
          },
          "osDisk": {
            "name": "[concat('Disk-', variables('vmsSettings').vmSQLName, '-OS')]",
            "caching": "ReadWrite",
            "osType": "Windows",
            "createOption": "FromImage",
            "diskSizeGB": 128,
            "managedDisk": {
              "storageAccountType": "[parameters('vmSQLStorageAccountType')]"
            }
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('vmsResourcesNames').vmSQLNicName)]"
            }
          ]
        },
        "licenseType": "[if(parameters('enableHybridBenefitServerLicenses'), 'Windows_Server', json('null'))]"
      },
      "resources": []
    },
    {
      "name": "[concat(variables('vmsSettings').vmSQLName, '/ConfigureSQLVM')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2022-08-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', variables('vmsSettings').vmSQLName)]"
      ],
      "properties": {
        "publisher": "Microsoft.Powershell",
        "type": "DSC",
        "typeHandlerVersion": "2.9",
        "autoUpgradeMinorVersion": true,
        "forceUpdateTag": "[variables('dscSettings').forceUpdateTag]",
        "settings": {
          "wmfVersion": "latest",
          "configuration": {
            "url": "[variables('dscSettings').vmSQLScriptFileUri]",
            "script": "[variables('dscSettings').vmSQLScript]",
            "function": "[variables('dscSettings').vmSQLFunction]"
          },
          "configurationArguments": {
            "DNSServerIP": "[variables('networkSettings').dcPrivateIPAddress]",
            "DomainFQDN": "[parameters('domainFQDN')]"
          },
          "privacy": {
            "dataCollection": "enable"
          }
        },
        "protectedSettings": {
          "configurationArguments": {
            "DomainAdminCreds": {
              "UserName": "[parameters('adminUserName')]",
              "Password": "[parameters('adminPassword')]"
            },
            "SqlSvcCreds": {
              "UserName": "[variables('deploymentSettings').sqlSvcUserName]",
              "Password": "[parameters('serviceAccountsPassword')]"
            },
            "SPSetupCreds": {
              "UserName": "[variables('deploymentSettings').spSetupUserName]",
              "Password": "[parameters('serviceAccountsPassword')]"
            }
          }
        }
      }
    },
    {
      "condition": "[and(equals(parameters('provisionSharePoint2013'), true()), or(equals(parameters('addPublicIPAddress'), 'Yes'), equals(parameters('addPublicIPAddress'), 'SharePointVMsOnly')))]",
      "name": "[variables('vmsResourcesNames').vmSP2013PublicIPName]",
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2022-07-01",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Basic",
        "tier": "Regional"
      },
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[toLower(concat(variables('resourceGroupNameFormatted'), '-', variables('vmsSettings').vmSP2013Name))]"
        }
      }
    },
    {
      "condition": "[equals(parameters('provisionSharePoint2013'), true())]",
      "name": "[variables('vmsResourcesNames').vmSP2013NicName]",
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2022-07-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('networkSettings').vNetPrivateName)]",
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('vmsResourcesNames').vmSP2013PublicIPName)]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('networkSettings').vNetPrivateName, variables('networkSettings').subnetSPName)]"
              },
              "publicIPAddress": "[if(or(equals(parameters('addPublicIPAddress'), 'Yes'), equals(parameters('addPublicIPAddress'), 'SharePointVMsOnly')), variables('networkSettings').vmSP2013PublicIPNicAssociation, json('null'))]"
            }
          }
        ]
      }
    },
    {
      "condition": "[equals(parameters('provisionSharePoint2013'), true())]",
      "name": "[variables('vmsSettings').vmSP2013Name]",
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2022-08-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', variables('vmsResourcesNames').vmSP2013NicName)]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSPSize')]"
        },
        "osProfile": {
          "computerName": "[variables('vmsSettings').vmSP2013Name]",
          "adminUsername": "[variables('deploymentSettings').localAdminUserName]",
          "adminPassword": "[parameters('adminPassword')]",
          "windowsConfiguration": {
            "timeZone": "[parameters('vmsTimeZone')]",
            "enableAutomaticUpdates": "[parameters('enableAutomaticUpdates')]",
            "provisionVMAgent": true,
            "patchSettings": {
              "patchMode": "[if(parameters('enableAutomaticUpdates'), 'AutomaticByOS', 'Manual')]",
              "assessmentMode": "ImageDefault"
            }
          }
        },
        "storageProfile": {
          "imageReference": {
            "publisher":  "[split(variables('vmsSettings').vmSP2013Image, ':')[0]]",
            "offer": "[split(variables('vmsSettings').vmSP2013Image, ':')[1]]",
            "sku":  "[split(variables('vmsSettings').vmSP2013Image, ':')[2]]",
            "version":  "[split(variables('vmsSettings').vmSP2013Image, ':')[3]]"
          },
          "osDisk": {
            "name": "[concat('Disk-', variables('vmsSettings').vmSP2013Name, '-OS')]",
            "caching": "ReadWrite",
            "osType": "Windows",
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "[parameters('vmSPStorageAccountType')]"
            }
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('vmsResourcesNames').vmSP2013NicName)]"
            }
          ]
        },
        "licenseType": "[if(parameters('enableHybridBenefitServerLicenses'), 'Windows_Server', json('null'))]"
      },
      "resources": []
    },
    {
      "condition": "[equals(parameters('provisionSharePoint2013'), true())]",
      "name": "[concat(variables('vmsSettings').vmSP2013Name, '/ConfigureSPVM')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2022-08-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', variables('vmsSettings').vmSP2013Name)]"
      ],
      "properties": {
        "publisher": "Microsoft.Powershell",
        "type": "DSC",
        "typeHandlerVersion": "2.9",
        "autoUpgradeMinorVersion": true,
        "forceUpdateTag": "[variables('dscSettings').forceUpdateTag]",
        "settings": {
          "wmfVersion": "latest",
          "configuration": {
            "url": "[variables('dscSettings').vmSPLegacyScriptFileUri]",
            "script": "[variables('dscSettings').vmSPLegacyScript]",
            "function": "[variables('dscSettings').vmSPFunction]"
          },
          "configurationArguments": {
            "DNSServerIP": "[variables('networkSettings').dcPrivateIPAddress]",
            "DomainFQDN": "[parameters('domainFQDN')]",
            "DCServerName": "[variables('vmsSettings').vmDCName]",
            "SQLServerName": "[variables('vmsSettings').vmSQLName]",
            "SQLAlias": "[variables('deploymentSettings').sqlAlias]",
            "SharePointVersion": "2013",
            "SharePointSitesAuthority": "[concat(variables('deploymentSettings').sharePointSitesAuthority, '2013')]",
            "SharePointCentralAdminPort": "[variables('deploymentSettings').sharePointCentralAdminPort]",
            "EnableAnalysis": "[variables('deploymentSettings').enableAnalysis]",
            "SharePointBits": "[json('null')]",
            "ConfigureADFS": "[parameters('configureADFS')]"
          },
          "privacy": {
            "dataCollection": "enable"
          }
        },
        "protectedSettings": {
          "configurationArguments": {
            "DomainAdminCreds": {
              "UserName": "[parameters('adminUserName')]",
              "Password": "[parameters('adminPassword')]"
            },
            "SPSetupCreds": {
              "UserName": "[variables('deploymentSettings').spSetupUserName]",
              "Password": "[parameters('serviceAccountsPassword')]"
            },
            "SPFarmCreds": {
              "UserName": "[variables('deploymentSettings').spFarmUserName]",
              "Password": "[parameters('serviceAccountsPassword')]"
            },
            "SPAppPoolCreds": {
              "UserName": "[variables('deploymentSettings').spAppPoolUserName]",
              "Password": "[parameters('serviceAccountsPassword')]"
            },
            "SPPassphraseCreds": {
              "UserName": "Passphrase",
              "Password": "[parameters('serviceAccountsPassword')]"
            }
          }
        }
      }
    },
    {
      "condition": "[and(equals(parameters('provisionSharePoint2016'), true()), or(equals(parameters('addPublicIPAddress'), 'Yes'), equals(parameters('addPublicIPAddress'), 'SharePointVMsOnly')))]",
      "name": "[variables('vmsResourcesNames').vmSP2016PublicIPName]",
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2022-07-01",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Basic",
        "tier": "Regional"
      },
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[toLower(concat(variables('resourceGroupNameFormatted'), '-', variables('vmsSettings').vmSP2016Name))]"
        }
      }
    },
    {
      "condition": "[equals(parameters('provisionSharePoint2016'), true())]",
      "name": "[variables('vmsResourcesNames').vmSP2016NicName]",
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2022-07-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('networkSettings').vNetPrivateName)]",
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('vmsResourcesNames').vmSP2016PublicIPName)]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('networkSettings').vNetPrivateName, variables('networkSettings').subnetSPName)]"
              },
              "publicIPAddress": "[if(or(equals(parameters('addPublicIPAddress'), 'Yes'), equals(parameters('addPublicIPAddress'), 'SharePointVMsOnly')), variables('networkSettings').vmSP2016PublicIPNicAssociation, json('null'))]"
            }
          }
        ]
      }
    },
    {
      "condition": "[equals(parameters('provisionSharePoint2016'), true())]",
      "name": "[variables('vmsSettings').vmSP2016Name]",
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2022-08-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', variables('vmsResourcesNames').vmSP2016NicName)]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSPSize')]"
        },
        "osProfile": {
          "computerName": "[variables('vmsSettings').vmSP2016Name]",
          "adminUsername": "[variables('deploymentSettings').localAdminUserName]",
          "adminPassword": "[parameters('adminPassword')]",
          "windowsConfiguration": {
            "timeZone": "[parameters('vmsTimeZone')]",
            "enableAutomaticUpdates": "[parameters('enableAutomaticUpdates')]",
            "provisionVMAgent": true,
            "patchSettings": {
              "patchMode": "[if(parameters('enableAutomaticUpdates'), 'AutomaticByOS', 'Manual')]",
              "assessmentMode": "ImageDefault"
            }
          }
        },
        "storageProfile": {
          "imageReference": {
            "publisher":  "[split(variables('vmsSettings').vmSP2016Image, ':')[0]]",
            "offer": "[split(variables('vmsSettings').vmSP2016Image, ':')[1]]",
            "sku":  "[split(variables('vmsSettings').vmSP2016Image, ':')[2]]",
            "version":  "[split(variables('vmsSettings').vmSP2016Image, ':')[3]]"
          },
          "osDisk": {
            "name": "[concat('Disk-', variables('vmsSettings').vmSP2016Name, '-OS')]",
            "caching": "ReadWrite",
            "osType": "Windows",
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "[parameters('vmSPStorageAccountType')]"
            }
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('vmsResourcesNames').vmSP2016NicName)]"
            }
          ]
        },
        "licenseType": "[if(parameters('enableHybridBenefitServerLicenses'), 'Windows_Server', json('null'))]"
      },
      "resources": []
    },
    {
      "condition": "[equals(parameters('provisionSharePoint2016'), true())]",
      "name": "[concat(variables('vmsSettings').vmSP2016Name, '/ConfigureSPVM')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2022-08-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', variables('vmsSettings').vmSP2016Name)]"
      ],
      "properties": {
        "publisher": "Microsoft.Powershell",
        "type": "DSC",
        "typeHandlerVersion": "2.9",
        "autoUpgradeMinorVersion": true,
        "forceUpdateTag": "[variables('dscSettings').forceUpdateTag]",
        "settings": {
          "wmfVersion": "latest",
          "configuration": {
            "url": "[variables('dscSettings').vmSPLegacyScriptFileUri]",
            "script": "[variables('dscSettings').vmSPLegacyScript]",
            "function": "[variables('dscSettings').vmSPFunction]"
          },
          "configurationArguments": {
            "DNSServerIP": "[variables('networkSettings').dcPrivateIPAddress]",
            "DomainFQDN": "[parameters('domainFQDN')]",
            "DCServerName": "[variables('vmsSettings').vmDCName]",
            "SQLServerName": "[variables('vmsSettings').vmSQLName]",
            "SQLAlias": "[variables('deploymentSettings').sqlAlias]",
            "SharePointVersion": "2016",
            "SharePointSitesAuthority": "[concat(variables('deploymentSettings').sharePointSitesAuthority, '2016')]",
            "SharePointCentralAdminPort": "[variables('deploymentSettings').sharePointCentralAdminPort]",
            "EnableAnalysis": "[variables('deploymentSettings').enableAnalysis]",
            "SharePointBits": "[json('null')]",
            "ConfigureADFS": "[parameters('configureADFS')]"
          },
          "privacy": {
            "dataCollection": "enable"
          }
        },
        "protectedSettings": {
          "configurationArguments": {
            "DomainAdminCreds": {
              "UserName": "[parameters('adminUserName')]",
              "Password": "[parameters('adminPassword')]"
            },
            "SPSetupCreds": {
              "UserName": "[variables('deploymentSettings').spSetupUserName]",
              "Password": "[parameters('serviceAccountsPassword')]"
            },
            "SPFarmCreds": {
              "UserName": "[variables('deploymentSettings').spFarmUserName]",
              "Password": "[parameters('serviceAccountsPassword')]"
            },
            "SPAppPoolCreds": {
              "UserName": "[variables('deploymentSettings').spAppPoolUserName]",
              "Password": "[parameters('serviceAccountsPassword')]"
            },
            "SPPassphraseCreds": {
              "UserName": "Passphrase",
              "Password": "[parameters('serviceAccountsPassword')]"
            }
          }
        }
      }
    },
    {
      "condition": "[and(equals(parameters('provisionSharePoint2019'), true()), or(equals(parameters('addPublicIPAddress'), 'Yes'), equals(parameters('addPublicIPAddress'), 'SharePointVMsOnly')))]",
      "name": "[variables('vmsResourcesNames').vmSP2019PublicIPName]",
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2022-07-01",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Basic",
        "tier": "Regional"
      },
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[toLower(concat(variables('resourceGroupNameFormatted'), '-', variables('vmsSettings').vmSP2019Name))]"
        }
      }
    },
    {
      "condition": "[equals(parameters('provisionSharePoint2019'), true())]",
      "name": "[variables('vmsResourcesNames').vmSP2019NicName]",
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2022-07-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('networkSettings').vNetPrivateName)]",
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('vmsResourcesNames').vmSP2019PublicIPName)]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('networkSettings').vNetPrivateName, variables('networkSettings').subnetSPName)]"
              },
              "publicIPAddress": "[if(or(equals(parameters('addPublicIPAddress'), 'Yes'), equals(parameters('addPublicIPAddress'), 'SharePointVMsOnly')), variables('networkSettings').vmSP2019PublicIPNicAssociation, json('null'))]"
            }
          }
        ]
      }
    },
    {
      "condition": "[equals(parameters('provisionSharePoint2019'), true())]",
      "name": "[variables('vmsSettings').vmSP2019Name]",
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2022-08-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', variables('vmsResourcesNames').vmSP2019NicName)]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSPSize')]"
        },
        "osProfile": {
          "computerName": "[variables('vmsSettings').vmSP2019Name]",
          "adminUsername": "[variables('deploymentSettings').localAdminUserName]",
          "adminPassword": "[parameters('adminPassword')]",
          "windowsConfiguration": {
            "timeZone": "[parameters('vmsTimeZone')]",
            "enableAutomaticUpdates": "[parameters('enableAutomaticUpdates')]",
            "provisionVMAgent": true,
            "patchSettings": {
              "patchMode": "[if(parameters('enableAutomaticUpdates'), 'AutomaticByOS', 'Manual')]",
              "assessmentMode": "ImageDefault"
            }
          }
        },
        "storageProfile": {
          "imageReference": {
            "publisher":  "[split(variables('vmsSettings').vmSP2019Image, ':')[0]]",
            "offer": "[split(variables('vmsSettings').vmSP2019Image, ':')[1]]",
            "sku":  "[split(variables('vmsSettings').vmSP2019Image, ':')[2]]",
            "version":  "[split(variables('vmsSettings').vmSP2019Image, ':')[3]]"
          },
          "osDisk": {
            "name": "[concat('Disk-', variables('vmsSettings').vmSP2019Name, '-OS')]",
            "caching": "ReadWrite",
            "osType": "Windows",
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "[parameters('vmSPStorageAccountType')]"
            }
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('vmsResourcesNames').vmSP2019NicName)]"
            }
          ]
        },
        "licenseType": "[if(parameters('enableHybridBenefitServerLicenses'), 'Windows_Server', json('null'))]"
      },
      "resources": []
    },
    {
      "condition": "[equals(parameters('provisionSharePoint2019'), true())]",
      "name": "[concat(variables('vmsSettings').vmSP2019Name, '/ConfigureSPVM')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2022-08-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', variables('vmsSettings').vmSP2019Name)]"
      ],
      "properties": {
        "publisher": "Microsoft.Powershell",
        "type": "DSC",
        "typeHandlerVersion": "2.9",
        "autoUpgradeMinorVersion": true,
        "forceUpdateTag": "[variables('dscSettings').forceUpdateTag]",
        "settings": {
          "wmfVersion": "latest",
          "configuration": {
            "url": "[variables('dscSettings').vmSPLegacyScriptFileUri]",
            "script": "[variables('dscSettings').vmSPLegacyScript]",
            "function": "[variables('dscSettings').vmSPFunction]"
          },
          "configurationArguments": {
            "DNSServerIP": "[variables('networkSettings').dcPrivateIPAddress]",
            "DomainFQDN": "[parameters('domainFQDN')]",
            "DCServerName": "[variables('vmsSettings').vmDCName]",
            "SQLServerName": "[variables('vmsSettings').vmSQLName]",
            "SQLAlias": "[variables('deploymentSettings').sqlAlias]",
            "SharePointVersion": "2019",
            "SharePointSitesAuthority": "[concat(variables('deploymentSettings').sharePointSitesAuthority, '2019')]",
            "SharePointCentralAdminPort": "[variables('deploymentSettings').sharePointCentralAdminPort]",
            "EnableAnalysis": "[variables('deploymentSettings').enableAnalysis]",
            "SharePointBits": "[json('null')]",
            "ConfigureADFS": "[parameters('configureADFS')]"
          },
          "privacy": {
            "dataCollection": "enable"
          }
        },
        "protectedSettings": {
          "configurationArguments": {
            "DomainAdminCreds": {
              "UserName": "[parameters('adminUserName')]",
              "Password": "[parameters('adminPassword')]"
            },
            "SPSetupCreds": {
              "UserName": "[variables('deploymentSettings').spSetupUserName]",
              "Password": "[parameters('serviceAccountsPassword')]"
            },
            "SPFarmCreds": {
              "UserName": "[variables('deploymentSettings').spFarmUserName]",
              "Password": "[parameters('serviceAccountsPassword')]"
            },
            "SPAppPoolCreds": {
              "UserName": "[variables('deploymentSettings').spAppPoolUserName]",
              "Password": "[parameters('serviceAccountsPassword')]"
            },
            "SPPassphraseCreds": {
              "UserName": "Passphrase",
              "Password": "[parameters('serviceAccountsPassword')]"
            }
          }
        }
      }
    },
    {
      "condition": "[and(not(equals(parameters('provisionSharePointSubscription'), 'No')), or(equals(parameters('addPublicIPAddress'), 'Yes'), equals(parameters('addPublicIPAddress'), 'SharePointVMsOnly')))]",
      "name": "[variables('vmsResourcesNames').vmSPSubscriptionPublicIPName]",
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2022-07-01",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Basic",
        "tier": "Regional"
      },
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[toLower(concat(variables('resourceGroupNameFormatted'), '-', variables('vmsSettings').vmSPSubscriptionName))]"
        }
      }
    },
    {
      "condition": "[not(equals(parameters('provisionSharePointSubscription'), 'No'))]",
      "name": "[variables('vmsResourcesNames').vmSPSubscriptionNicName]",
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2022-07-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('networkSettings').vNetPrivateName)]",
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('vmsResourcesNames').vmSPSubscriptionPublicIPName)]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('networkSettings').vNetPrivateName, variables('networkSettings').subnetSPName)]"
              },
              "publicIPAddress": "[if(or(equals(parameters('addPublicIPAddress'), 'Yes'), equals(parameters('addPublicIPAddress'), 'SharePointVMsOnly')), variables('networkSettings').vmSPSubscriptionPublicIPNicAssociation, json('null'))]"
            }
          }
        ]
      }
    },
    {
      "condition": "[not(equals(parameters('provisionSharePointSubscription'), 'No'))]",
      "name": "[variables('vmsSettings').vmSPSubscriptionName]",
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2022-08-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', variables('vmsResourcesNames').vmSPSubscriptionNicName)]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSPSize')]"
        },
        "osProfile": {
          "computerName": "[variables('vmsSettings').vmSPSubscriptionName]",
          "adminUsername": "[variables('deploymentSettings').localAdminUserName]",
          "adminPassword": "[parameters('adminPassword')]",
          "windowsConfiguration": {
            "timeZone": "[parameters('vmsTimeZone')]",
            "enableAutomaticUpdates": "[parameters('enableAutomaticUpdates')]",
            "provisionVMAgent": true,
            "patchSettings": {
              "patchMode": "[if(parameters('enableAutomaticUpdates'), 'AutomaticByOS', 'Manual')]",
              "assessmentMode": "ImageDefault"
            }
          }
        },
        "storageProfile": {
          "imageReference": {
            "publisher":  "[split(variables('vmsSettings').vmSPSubscriptionImage, ':')[0]]",
            "offer": "[split(variables('vmsSettings').vmSPSubscriptionImage, ':')[1]]",
            "sku":  "[split(variables('vmsSettings').vmSPSubscriptionImage, ':')[2]]",
            "version":  "[split(variables('vmsSettings').vmSPSubscriptionImage, ':')[3]]"
          },
          "osDisk": {
            "name": "[concat('Disk-', variables('vmsSettings').vmSPSubscriptionName, '-OS')]",
            "caching": "ReadWrite",
            "osType": "Windows",
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "[parameters('vmSPStorageAccountType')]"
            }
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('vmsResourcesNames').vmSPSubscriptionNicName)]"
            }
          ]
        },
        "licenseType": "[if(parameters('enableHybridBenefitServerLicenses'), 'Windows_Server', json('null'))]"
      },
      "resources": []
    },
    {
      "condition": "[not(equals(parameters('provisionSharePointSubscription'), 'No'))]",
      "name": "[concat(variables('vmsSettings').vmSPSubscriptionName, '/ConfigureSPVM')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2022-08-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', variables('vmsSettings').vmSPSubscriptionName)]"
      ],
      "properties": {
        "publisher": "Microsoft.Powershell",
        "type": "DSC",
        "typeHandlerVersion": "2.9",
        "autoUpgradeMinorVersion": true,
        "forceUpdateTag": "[variables('dscSettings').forceUpdateTag]",
        "settings": {
          "wmfVersion": "latest",
          "configuration": {
            "url": "[variables('dscSettings').vmSPSubscriptionScriptFileUri]",
            "script": "[variables('dscSettings').vmSPSubscriptionScript]",
            "function": "[variables('dscSettings').vmSPFunction]"
          },
          "configurationArguments": {
            "DNSServerIP": "[variables('networkSettings').dcPrivateIPAddress]",
            "DomainFQDN": "[parameters('domainFQDN')]",
            "DCServerName": "[variables('vmsSettings').vmDCName]",
            "SQLServerName": "[variables('vmsSettings').vmSQLName]",
            "SQLAlias": "[variables('deploymentSettings').sqlAlias]",
            "SharePointVersion": "[parameters('provisionSharePointSubscription')]",
            "SharePointSitesAuthority": "[concat(variables('deploymentSettings').sharePointSitesAuthority, 'SE')]",
            "SharePointCentralAdminPort": "[variables('deploymentSettings').sharePointCentralAdminPort]",
            "EnableAnalysis": "[variables('deploymentSettings').enableAnalysis]",
            "SharePointBits": "[variables('sharePointSettings').sharePointSubscriptionBits]",
            "ConfigureADFS": "[parameters('configureADFS')]"
          },
          "privacy": {
            "dataCollection": "enable"
          }
        },
        "protectedSettings": {
          "configurationArguments": {
            "DomainAdminCreds": {
              "UserName": "[parameters('adminUserName')]",
              "Password": "[parameters('adminPassword')]"
            },
            "SPSetupCreds": {
              "UserName": "[variables('deploymentSettings').spSetupUserName]",
              "Password": "[parameters('serviceAccountsPassword')]"
            },
            "SPFarmCreds": {
              "UserName": "[variables('deploymentSettings').spFarmUserName]",
              "Password": "[parameters('serviceAccountsPassword')]"
            },
            "SPAppPoolCreds": {
              "UserName": "[variables('deploymentSettings').spAppPoolUserName]",
              "Password": "[parameters('serviceAccountsPassword')]"
            },
            "SPPassphraseCreds": {
              "UserName": "Passphrase",
              "Password": "[parameters('serviceAccountsPassword')]"
            }
          }
        }
      }
    },
    {
      "condition": "[equals(parameters('addAzureBastion'), true())]",
      "name": "NSG-Subnet-AzureBastion",
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2022-07-01",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
            {
                "name": "AllowHttpsInBound",
                "properties": {
                    "protocol": "Tcp",
                    "sourcePortRange": "*",
                    "sourceAddressPrefix": "Internet",
                    "destinationPortRange": "443",
                    "destinationAddressPrefix": "*",
                    "access": "Allow",
                    "priority": 100,
                    "direction": "Inbound"
                }
            },
            {
                "name": "AllowGatewayManagerInBound",
                "properties": {
                    "protocol": "Tcp",
                    "sourcePortRange": "*",
                    "sourceAddressPrefix": "GatewayManager",
                    "destinationPortRange": "443",
                    "destinationAddressPrefix": "*",
                    "access": "Allow",
                    "priority": 110,
                    "direction": "Inbound"
                }
            },
            {
                "name": "AllowLoadBalancerInBound",
                "properties": {
                    "protocol": "Tcp",
                    "sourcePortRange": "*",
                    "sourceAddressPrefix": "AzureLoadBalancer",
                    "destinationPortRange": "443",
                    "destinationAddressPrefix": "*",
                    "access": "Allow",
                    "priority": 120,
                    "direction": "Inbound"
                }
            },
            {
                "name": "AllowBastionHostCommunicationInBound",
                "properties": {
                    "protocol": "*",
                    "sourcePortRange": "*",
                    "sourceAddressPrefix": "VirtualNetwork",
                    "destinationPortRanges": [
                        "8080",
                        "5701"
                    ],
                    "destinationAddressPrefix": "VirtualNetwork",
                    "access": "Allow",
                    "priority": 130,
                    "direction": "Inbound"
                }
            },
            {
                "name": "DenyAllInBound",
                "properties": {
                    "protocol": "*",
                    "sourcePortRange": "*",
                    "sourceAddressPrefix": "*",
                    "destinationPortRange": "*",
                    "destinationAddressPrefix": "*",
                    "access": "Deny",
                    "priority": 1000,
                    "direction": "Inbound"
                }
            },
            {
                "name": "AllowSshRdpOutBound",
                "properties": {
                    "protocol": "Tcp",
                    "sourcePortRange": "*",
                    "sourceAddressPrefix": "*",
                    "destinationPortRanges": [
                        "22",
                        "3389"
                    ],
                    "destinationAddressPrefix": "VirtualNetwork",
                    "access": "Allow",
                    "priority": 100,
                    "direction": "Outbound"
                }
            },
            {
                "name": "AllowAzureCloudCommunicationOutBound",
                "properties": {
                    "protocol": "Tcp",
                    "sourcePortRange": "*",
                    "sourceAddressPrefix": "*",
                    "destinationPortRange": "443",
                    "destinationAddressPrefix": "AzureCloud",
                    "access": "Allow",
                    "priority": 110,
                    "direction": "Outbound"
                }
            },
            {
                "name": "AllowBastionHostCommunicationOutBound",
                "properties": {
                    "protocol": "*",
                    "sourcePortRange": "*",
                    "sourceAddressPrefix": "VirtualNetwork",
                    "destinationPortRanges": [
                        "8080",
                        "5701"
                    ],
                    "destinationAddressPrefix": "VirtualNetwork",
                    "access": "Allow",
                    "priority": 120,
                    "direction": "Outbound"
                }
            },
            {
                "name": "AllowGetSessionInformationOutBound",
                "properties": {
                    "protocol": "*",
                    "sourcePortRange": "*",
                    "sourceAddressPrefix": "*",
                    "destinationAddressPrefix": "Internet",
                    "destinationPortRanges": [
                        "80",
                        "443"
                    ],
                    "access": "Allow",
                    "priority": 130,
                    "direction": "Outbound"
                }
            },
            {
                "name": "DenyAllOutBound",
                "properties": {
                    "protocol": "*",
                    "sourcePortRange": "*",
                    "destinationPortRange": "*",
                    "sourceAddressPrefix": "*",
                    "destinationAddressPrefix": "*",
                    "access": "Deny",
                    "priority": 1000,
                    "direction": "Outbound"
                }
            }
        ]
      }
    },
    {
      "condition": "[equals(parameters('addAzureBastion'), true())]",
      "name": "[concat(variables('networkSettings').vNetPrivateName, '/', 'AzureBastionSubnet')]",
      "type": "Microsoft.Network/virtualNetworks/subnets",
      "apiVersion": "2022-07-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('networkSettings').vNetPrivateName)]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', 'NSG-Subnet-AzureBastion')]"
      ],
      "properties": {
        "addressPrefix": "10.1.4.0/24",
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', 'NSG-Subnet-AzureBastion')]"
        }
      }
    },
    {
      "condition": "[equals(parameters('addAzureBastion'), true())]",
      "name": "PublicIP-Bastion",
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2022-07-01",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard",
        "tier": "Regional"
      },
      "properties": {
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[toLower(replace(concat(variables('resourceGroupNameFormatted'), '-', 'Bastion'), '_', '-'))]"
        }
      }
    },
    {
      "condition": "[equals(parameters('addAzureBastion'), true())]",
      "name": "Bastion",
      "type": "Microsoft.Network/bastionHosts",
      "location": "[parameters('location')]",
      "apiVersion": "2022-07-01",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', 'PublicIP-Bastion')]",
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('networkSettings').vNetPrivateName, 'AzureBastionSubnet')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "IpConf",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', 'PublicIP-Bastion')]"
              },
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('networkSettings').vNetPrivateName, 'AzureBastionSubnet')]"
              }
            }
          }
        ]
      }
    }
  ],
  "outputs": {
    "domainAdminAccount": {
      "type": "string",
      "value": "[concat(substring(parameters('domainFQDN'), 0, indexOf(parameters('domainFQDN'), '.')), '\\', parameters('adminUserName'))]"
    },
    "domainAdminAccountFormatForBastion": {
      "type": "string",
      "value": "[concat(parameters('adminUserName'), '@', parameters('domainFQDN'))]"
    },
    "localAdminAccount": {
      "type": "string",
      "value": "[variables('deploymentSettings').localAdminUserName]"
    },
    "publicIPAddressSPSE": {
      "condition": "[and(not(equals(parameters('provisionSharePointSubscription'), 'No')), or(equals(parameters('addPublicIPAddress'), 'Yes'), equals(parameters('addPublicIPAddress'), 'SharePointVMsOnly')))]",
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', variables('vmsResourcesNames').vmSPSubscriptionPublicIPName)).dnsSettings.fqdn]"
    },
    "publicIPAddressSP2019": {
      "condition": "[and(equals(parameters('provisionSharePoint2019'), true()), or(equals(parameters('addPublicIPAddress'), 'Yes'), equals(parameters('addPublicIPAddress'), 'SharePointVMsOnly')))]",
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', variables('vmsResourcesNames').vmSP2019PublicIPName)).dnsSettings.fqdn]"
    },
    "publicIPAddressSP2016": {
      "condition": "[and(equals(parameters('provisionSharePoint2016'), true()), or(equals(parameters('addPublicIPAddress'), 'Yes'), equals(parameters('addPublicIPAddress'), 'SharePointVMsOnly')))]",
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', variables('vmsResourcesNames').vmSP2016PublicIPName)).dnsSettings.fqdn]"
    },
    "publicIPAddressSP2013": {
      "condition": "[and(equals(parameters('provisionSharePoint2013'), true()), or(equals(parameters('addPublicIPAddress'), 'Yes'), equals(parameters('addPublicIPAddress'), 'SharePointVMsOnly')))]",
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', variables('vmsResourcesNames').vmSP2013PublicIPName)).dnsSettings.fqdn]"
    },
    "publicIPAddressSQL": {
      "condition": "[equals(parameters('addPublicIPAddress'), 'Yes')]",
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', variables('vmsResourcesNames').vmSQLPublicIPName)).dnsSettings.fqdn]"
    },
    "publicIPAddressDC": {
      "condition": "[equals(parameters('addPublicIPAddress'), 'Yes')]",
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', variables('vmsResourcesNames').vmDCPublicIPName)).dnsSettings.fqdn]"
    }
  }
}
